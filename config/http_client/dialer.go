package http_client

import "time"

// Dialer - содержит опции для подключения по HTTP(S) к адресу.
type Dialer struct {
	// Timeout это максимальное время, в течение которого набор будет ждать
	// завершения подключения. Если крайний срок также установлен, он может завершиться неудачей
	// раньше.
	//
	// По умолчанию тайм-аут отсутствует.
	//
	// При использовании TCP и наборе имени хоста с несколькими IP
	// адресами время ожидания может быть разделено между ними.
	//
	// С таймаутом или без него операционная система может наложить
	// его собственный более ранний тайм-аут. Например, тайм-ауты TCP
	// часто составляют около 3 минут
	// (по умолчанию 30 * time.Second).
	Timeout time.Duration `json:"timeout" bson:"timeout" yaml:"timeout" form:"timeout" description:"Timeout это максимальное время, в течение которого набор будет ждать завершения подключения. Если крайний срок также установлен, он может завершиться неудачей раньше. По умолчанию тайм-аут отсутствует. При использовании TCP и наборе имени хоста с несколькими IP адресами время ожидания может быть разделено между ними. С таймаутом или без него операционная система может наложить его собственный более ранний тайм-аут. Например, тайм-ауты TCP часто составляют около 3 минут (по умолчанию 30 * time.Second)."`

	// Deadline является абсолютным моментом времени, после которого соединение
	// потерпит неудачу. Если установлен тайм-аут, он может завершиться неудачей раньше.
	// Ноль означает отсутствие крайнего срока или зависит от операционной системы
	// как и в случае с параметром Тайм-аута
	// (по умолчанию time.Time{}).
	Deadline time.Time `json:"deadline" bson:"deadline" yaml:"deadline" form:"deadline" description:"Deadline является абсолютным моментом времени, после которого соединение потерпит неудачу. Если установлен тайм-аут, он может завершиться неудачей раньше. Ноль означает отсутствие крайнего срока или зависит от операционной системы как и в случае с параметром Тайм-аута (по умолчанию time.Time{})."`

	// FallbackDelay указывает время ожидания перед
	// созданием быстрого резервного соединения RFC 6555. То есть, это
	// - это количество времени, необходимое для ожидания успешного выполнения IPv6, прежде
	// чем предположить, что IPv6 настроен неправильно, и вернуться к IPv4.
	//
	// Если значение равно нулю, используется задержка по умолчанию в 300 мс.
	// Отрицательное значение отключает быструю резервную поддержку
	// (по умолчанию 0).
	FallbackDelay time.Duration `json:"fallback_delay" bson:"fallback_delay" yaml:"fallback_delay" form:"fallback_delay" description:"FallbackDelay указывает время ожидания перед созданием быстрого резервного соединения RFC 6555. То есть, это - это количество времени, необходимое для ожидания успешного выполнения IPv6, прежде чем предположить, что IPv6 настроен неправильно, и вернуться к IPv4. Если значение равно нулю, используется задержка по умолчанию в 300 мс. Отрицательное значение отключает быструю резервную поддержку (по умолчанию 0)."`

	// KeepAlive задает интервал между поддержанием в рабочем состоянии
	// проверяет наличие активного сетевого подключения.
	// Если значение равно нулю, то зонды для поддержания работоспособности отправляются со значением по умолчанию
	// (в настоящее время 15 секунд), если поддерживается протоколом и работает
	// система. Сетевые протоколы или операционные системы, которые
	// не поддерживают сохранение, игнорируют это поле.
	// Если отрицательный результат, датчики поддержания работоспособности отключены
	// (по умолчанию 30 * time.Second).
	KeepAlive time.Duration `json:"keep_alive" bson:"keep_alive" yaml:"keep_alive" form:"keep_alive" description:"KeepAlive задает интервал между поддержанием в рабочем состоянии проверяет наличие активного сетевого подключения. Если значение равно нулю, то зонды для поддержания работоспособности отправляются со значением по умолчанию (в настоящее время 15 секунд), если поддерживается протоколом и работает система. Сетевые протоколы или операционные системы, которые не поддерживают сохранение, игнорируют это поле. Если отрицательный результат, датчики поддержания работоспособности отключены (по умолчанию 30 * time.Second)."`
}
